{"ast":null,"code":"var _jsxFileName = \"/Users/arana1/Documents/Work/QA-ClientApp/src/components/login-flow/parseAccessToken.js\";\nimport React, { useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nexport default function ParseLoginAccessToken(props) {\n  const {\n    response,\n    setResponse\n  } = props;\n  const [customParam, setCustomParam] = useState(\"\");\n  const {\n    isAuthenticated,\n    getAccessTokenSilently,\n    getIdTokenClaims\n  } = useAuth0();\n\n  const getOTPAccessToken = ({\n    AccessToken\n  }) => {\n    var base64Url = AccessToken.split(\".\")[1];\n    var base64 = base64Url === null || base64Url === void 0 ? void 0 : base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    var jsonPayload = decodeURIComponent(atob(base64).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n    const ans = JSON.parse(jsonPayload);\n    return ans;\n  };\n\n  const [parseAccessToken, setParseAccessToken] = useState(getOTPAccessToken({\n    AccessToken: response === null || response === void 0 ? void 0 : response.AccessToken\n  }));\n  console.log(\"is this changing\", parseAccessToken);\n\n  const getNewAccessToken = async props => {\n    console.log(\"went in this one\");\n\n    if (isAuthenticated) {\n      const data = await getAccessTokenSilently({\n        ignoreCache: true,\n        subrefid: props.subrefid\n      });\n      const data2 = await getIdTokenClaims();\n      console.log(\"old\", response.AccessToken, \"new\", data);\n      setResponse({\n        AccessToken: data,\n        IdToken: data2 === null || data2 === void 0 ? void 0 : data2.__raw\n      });\n      setParseAccessToken(getOTPAccessToken({\n        AccessToken: data\n      }));\n    }\n  };\n\n  const getOTPIdToken = () => {\n    console.log(\"e\");\n    var base64Url = response === null || response === void 0 ? void 0 : response.IdToken.split(\".\")[1];\n    var base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    var jsonPayload = decodeURIComponent(atob(base64).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n    const ans = JSON.parse(jsonPayload);\n    console.log(ans);\n    return ans;\n  };\n\n  const parse2 = getOTPIdToken();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"1rem\",\n      border: \"1px solid blue\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Claims of Access token\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), \"Issuer : \", parseAccessToken.iss, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }), \"Subject : \", parseAccessToken.sub, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), \"Issued at : \", parseAccessToken.iat, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), \"Expires in : \", parseAccessToken.exp, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), \"Client(Authorized party) : \", parseAccessToken.azp, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), \"Scopes : \", parseAccessToken.scope, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), parseAccessToken.subrefid ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"SubrefId : \", parseAccessToken.subrefid) : null), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"1rem\",\n      marginRight: \"1rem\",\n      border: \"1px solid blue\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"Claims of ID token\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }), \"Nickname : \", parse2.nickname, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), \"Name : \", parse2.name, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), \"Email : \", parse2.email, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }), \"Is Email Verified : \", parse2.email_verified, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), \"Picture : \", parse2.picture, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, \"Custom parameter:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: customParam,\n    onChange: e => setCustomParam(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    className: \"mt-5\",\n    onClick: e => {\n      getNewAccessToken({\n        subrefid: customParam\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"Refresh token call\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"AccessToken: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: \"100%\"\n    },\n    value: response === null || response === void 0 ? void 0 : response.AccessToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      marginTop: \"0.5rem\",\n      wordBreak: \"break-all\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, \"IdToken:\"), \" \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: response === null || response === void 0 ? void 0 : response.IdToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/arana1/Documents/Work/QA-ClientApp/src/components/login-flow/parseAccessToken.js"],"names":["React","useState","Button","useAuth0","ParseLoginAccessToken","props","response","setResponse","customParam","setCustomParam","isAuthenticated","getAccessTokenSilently","getIdTokenClaims","getOTPAccessToken","AccessToken","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","ans","JSON","parse","parseAccessToken","setParseAccessToken","console","log","getNewAccessToken","data","ignoreCache","subrefid","data2","IdToken","__raw","getOTPIdToken","parse2","display","justifyContent","padding","border","iss","sub","iat","exp","azp","scope","marginRight","nickname","name","email","email_verified","picture","marginTop","e","target","value","flexDirection","fontWeight","width","wordBreak"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nexport default function ParseLoginAccessToken(props) {\n  const { response, setResponse } = props;\n  const [customParam, setCustomParam] = useState(\"\");\n  const { isAuthenticated, getAccessTokenSilently, getIdTokenClaims } =\n    useAuth0();\n  const getOTPAccessToken = ({ AccessToken }) => {\n    var base64Url = AccessToken.split(\".\")[1];\n    var base64 = base64Url?.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    var jsonPayload = decodeURIComponent(\n      atob(base64)\n        .split(\"\")\n        .map(function (c) {\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join(\"\")\n    );\n    const ans = JSON.parse(jsonPayload);\n    return ans;\n  };\n  const [parseAccessToken, setParseAccessToken] = useState(\n    getOTPAccessToken({ AccessToken: response?.AccessToken })\n  );\n  console.log(\"is this changing\", parseAccessToken);\n  const getNewAccessToken = async (props) => {\n    console.log(\"went in this one\");\n    if (isAuthenticated) {\n      const data = await getAccessTokenSilently({\n        ignoreCache: true,\n        subrefid: props.subrefid,\n      });\n      const data2 = await getIdTokenClaims();\n      console.log(\"old\", response.AccessToken, \"new\", data);\n      setResponse({ AccessToken: data, IdToken: data2?.__raw });\n      setParseAccessToken(getOTPAccessToken({ AccessToken: data }));\n    }\n  };\n\n  const getOTPIdToken = () => {\n    console.log(\"e\");\n    var base64Url = response?.IdToken.split(\".\")[1];\n    var base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    var jsonPayload = decodeURIComponent(\n      atob(base64)\n        .split(\"\")\n        .map(function (c) {\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join(\"\")\n    );\n    const ans = JSON.parse(jsonPayload);\n    console.log(ans);\n    return ans;\n  };\n\n  const parse2 = getOTPIdToken();\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <div style={{ padding: \"1rem\", border: \"1px solid blue\" }}>\n          <b>Claims of Access token</b>\n          <br />\n          Issuer : {parseAccessToken.iss}\n          <br />\n          Subject : {parseAccessToken.sub}\n          <br />\n          Issued at : {parseAccessToken.iat}\n          <br />\n          Expires in : {parseAccessToken.exp}\n          <br />\n          Client(Authorized party) : {parseAccessToken.azp}\n          <br />\n          Scopes : {parseAccessToken.scope}\n          <br />\n          {parseAccessToken.subrefid ? (\n            <p>SubrefId : {parseAccessToken.subrefid}</p>\n          ) : null}\n        </div>\n        <div\n          style={{\n            padding: \"1rem\",\n            marginRight: \"1rem\",\n            border: \"1px solid blue\",\n          }}\n        >\n          <b>Claims of ID token</b>\n          <br />\n          Nickname : {parse2.nickname}\n          <br />\n          Name : {parse2.name}\n          <br />\n          Email : {parse2.email}\n          <br />\n          Is Email Verified : {parse2.email_verified}\n          <br />\n          Picture : {parse2.picture}\n          <br />\n        </div>\n      </div>\n      <div style={{ marginTop: \"1rem\" }}>\n        Custom parameter:\n        <input\n          type=\"text\"\n          value={customParam}\n          onChange={(e) => setCustomParam(e.target.value)}\n        ></input>\n        <br />\n        <Button\n          color=\"primary\"\n          className=\"mt-5\"\n          onClick={(e) => {\n            getNewAccessToken({ subrefid: customParam });\n          }}\n        >\n          Refresh token call\n        </Button>\n        <div>\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <p style={{ fontWeight: \"bold\" }}>AccessToken: </p>\n            <input\n              type=\"text\"\n              style={{ width: \"100%\" }}\n              value={response?.AccessToken}\n            />\n          </div>\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <p style={{ marginTop: \"0.5rem\", wordBreak: \"break-all\" }}>\n              <span style={{ fontWeight: \"bold\" }}>IdToken:</span>{\" \"}\n            </p>\n            <input type=\"text\" value={response?.IdToken} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}